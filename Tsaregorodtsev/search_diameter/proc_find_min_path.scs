scp_program -> proc_find_min_path (*	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _graph;;
		-> rrel_2: rrel_in: _beg_vertex;;
        	-> rrel_3: rrel_out: _tmp_diameter;;
	*);;

	-> rrel_operators: ... (*
		-> rrel_init: ..proc_find_min_path_operator1 (*
			<- searchSetStr5;;
    		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;
		
			->rrel_set_3: rrel_assign: rrel_scp_var: _not_checked_vertexes;;

			=> nrel_then: ..proc_find_min_path_create_diameter;;		
		 	=> nrel_else: ..proc_find_min_path_operator_erase_not_checked_vertexes;;	
		*);;

		-> ..proc_find_min_path_create_diameter (*
			<- contAssign;;
                -> rrel_1: rrel_assign: rrel_scp_var: _tmp_diameter;;
                -> rrel_2: rrel_fixed: rrel_scp_const: [-2];;

                => nrel_goto: ..proc_find_min_path_operator2;;
		*);;

		-> ..proc_find_min_path_operator2 (*
			<- searchElStr3;;
		 	-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _beg_vertex;;

		 	=> nrel_goto: ..proc_find_min_path_operator_er;;	
		*);;
		
		-> ..proc_find_min_path_operator_er (*
			<- eraseEl;;
		 	-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc2;;

		 	=> nrel_goto: ..proc_find_min_path_operator3;;	
		*);;

		-> ..proc_find_min_path_operator3 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _new_wave;;

			=> nrel_goto: ..proc_find_min_path_operator4;;
		*);;

		-> ..proc_find_min_path_operator4 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _new_wave;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _beg_vertex;;

			=> nrel_goto: ..proc_find_min_path_wave_list;;
		*);;

//Переменная для подсчёта волн.
		-> ..proc_find_min_path_wave_list (*
        	<- genElStr3;;
        	-> rrel_1: rrel_assign: rrel_scp_var: _wave_list;;
        	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
        	-> rrel_3: rrel_fixed: rrel_scp_var: _new_wave;;

        	=> nrel_goto: ..proc_find_min_path_operator12;;
*);;


		-> ..proc_find_min_path_operator12 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_create_wave;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _new_wave;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
				-> rrel_4: rrel_assign: rrel_scp_var: _created_wave;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_find_min_path_operator13;;
		*);;

		-> ..proc_find_min_path_operator13 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_find_min_path_operator_varAssign;;
		*);;		
		
		->..proc_find_min_path_operator_varAssign (*
			<-varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _new_wave;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _created_wave;;

                        =>nrel_goto: ..proc_find_min_path_operator14;;
		*);;


		-> ..proc_find_min_path_operator14 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _wave_list;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _new_wave;;

			=> nrel_goto: ..proc_find_min_path_operator24;;
		*);;
	
		

// 5. Если новая волна пуста, то значит между вершинами не существует пути.
		-> ..proc_find_min_path_operator24 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _new_wave;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
// Новая волна не пуста.
			=> nrel_then: ..proc_find_min_path_operator12;;
// Новая волна пуста. Находим самый Длинный путь
			=> nrel_else: ..proc_find_min_path_operator25;; 
		*);;


        -> ..proc_find_min_path_operator25(*
            <-searchElStr3;;
            ->rrel_1:rrel_fixed:rrel_scp_var:_wave_list;;
            ->rrel_2:rrel_assign:rrel_scp_var:_arc1;;
            ->rrel_3:rrel_assign:rrel_scp_var:_elem1;;
            =>nrel_then:..proc_find_min_path_operator26;;
            =>nrel_else:..proc_find_min_path_operator_erase_not_checked_vertexes;;
        *);;

        -> ..proc_find_min_path_operator26(*
            <-eraseEl;;
            ->rrel_1:rrel_fixed:rrel_erase:rrel_scp_var:_arc1;;
            =>nrel_goto:..proc_find_min_path_operator27;;
        *);;

        -> ..proc_find_min_path_operator27 (*
            <- contAdd;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _tmp_diameter;;
            -> rrel_2: rrel_fixed: rrel_scp_var: _tmp_diameter;;
            -> rrel_3: rrel_fixed: rrel_scp_const: [1];;

            => nrel_goto: ..proc_find_min_path_operator25;;
        *);;



// Чистим память.	

		-> ..proc_find_min_path_operator_erase_not_checked_vertexes (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _not_checked_vertexes;;

            => nrel_goto: ..proc_find_min_path_operator_erase_wave_list;;
		*);;

        -> ..proc_find_min_path_operator_erase_wave_list (*
            <- eraseEl;;
            -> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _wave_list;;

            => nrel_goto: ..proc_find_min_path_operator_return;;
        *);;

		-> ..proc_find_min_path_operator_return (*
			<- return;;
		*);;
		
	*);;
*);;
