scp_program -> visiting_round_deep_2find_cyclic_graph (*
	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _current;;
		-> rrel_2: rrel_in: _prev;;
		-> rrel_3: rrel_in: _graph;;
		-> rrel_4: rrel_in: _marked_nodes;;
		-> rrel_5: rrel_in: _cyclic_graph;;
	*);;

	-> rrel_operators: ... (*

	-> rrel_init: ..start (*
<- searchElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _cyclic_graph;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_fixed : rrel_scp_var : _graph;;

=> nrel_then : ..oper_return;;
=> nrel_else : ..step1;; *);;


-> ..step1 (*
<- searchElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _marked_nodes;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_fixed : rrel_scp_var : _current;;

=> nrel_then : ..step6;;
=> nrel_else : ..step2;; *);;


-> ..step2 (*
<- genElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _marked_nodes;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_fixed : rrel_scp_var : _current;;

=> nrel_goto : ..step3;; *);;



-> ..step3 (*
<- searchSetStr5;;
-> rrel_1: rrel_fixed: rrel_scp_var: _current;;
-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
-> rrel_5: rrel_fixed: rrel_scp_var : _graph;;
-> rrel_set_3 : rrel_assign : rrel_scp_var : _soUPset;;

=> nrel_then : ..step4;; 
=> nrel_else : ..oper_return ;;*);;


-> ..step4 (*
<- searchElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _soUPset;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_assign : rrel_scp_var : _new;;

=> nrel_then : ..step5;; 
=> nrel_else : ..one_step_return1 ;;*);;


-> ..step5 (*
<- eraseEl;;
-> rrel_1 : rrel_fixed : rrel_pos_const_perm : rrel_erase:rrel_scp_var : _arc;;

=> nrel_goto : ..step7;; *);;


-> ..step7 (*
<- ifCoin;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _new;;
-> rrel_2 : rrel_fixed : rrel_scp_var : _prev;;

=> nrel_then: ..step4;;
=> nrel_else: ..ave_recurs;; *);;


-> ..ave_recurs (*
<- call;;
	-> rrel_1: rrel_fixed: rrel_scp_const: visiting_round_deep_2find_cyclic_graph;;
	-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
		-> rrel_1: rrel_fixed: rrel_scp_var: _new;;
		-> rrel_2: rrel_fixed: rrel_scp_var: _current;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_4: rrel_fixed: rrel_scp_var: _marked_nodes;;
		-> rrel_5: rrel_fixed: rrel_scp_var: _cyclic_graph;;
	*);;
	-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

	=> nrel_goto: ..hail_to_the_king;;
*);;
	
-> ..hail_to_the_king (*
	<- waitReturn;;
	-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
	
	=> nrel_goto: ..step4;; *);;
	

-> ..step6 (*
<- genElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _cyclic_graph;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_fixed : rrel_scp_var : _graph;;

=> nrel_goto : ..oper_return;; *);;


-> ..one_step_return1 (*
<- searchElStr3;;
-> rrel_1 : rrel_fixed : rrel_scp_var : _marked_nodes;;
-> rrel_2 : rrel_assign : rrel_pos_const_perm : rrel_scp_var : _arc;;
-> rrel_3 : rrel_fixed : rrel_scp_var : _current;;

=> nrel_then : ..one_step_return2;; 
=> nrel_else : ..finish ;;*);;


-> ..one_step_return2 (*
<- eraseEl;;
-> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _arc;;

=> nrel_goto : ..finish;; *);;



-> ..finish (*
<- eraseEl;;
-> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _soUPset;;

=> nrel_goto : ..oper_return;; *);;



-> ..oper_return (*
<-return;; *);;


*);;
*);;
